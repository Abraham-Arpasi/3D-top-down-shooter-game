using UnityEngine;
//below is put here since we are setting up the input systems for the movement.
public class PlayerMovement : MonoBehaviour
{
    //getting reference from the player script so we dont need a new instance.
    private Player player;

    private PlayerControls controls;

    //This allows us control over the character controller component on the player object.
    private CharacterController characterController;

    //This give us access to the animator.
    private Animator animator;

    //Header is used to help organize the information shown on the script component.
    [Header("movement info")]
    //before we move the character we need to know which direction we are moving the character.
    private Vector3 movementDirection;
    private Vector2 moveInput;
    //this is for setting up the speed of the characters movement.
    //SerializeField lets you see the variable in the script component when it is made private.
    [SerializeField] private float walkSpeed;
    [SerializeField] private float runSpeed;
    [SerializeField] private float turnSpeed;
    private float speed;
    private bool isRunning;

    //This is the variable for setting up for gravity.
    private float verticalVelocity;

    //the awake function is used to fill up the script with information since the controls are empty.
    private void Awake()
    {
        //this is empty because we have a Player script now
    }

    private void AssignInputEvents()
    {
        //now controls equals to the controls from the Player script.
        controls = player.controls;

        //gives access to the controls to the action map to the actions.
        //add context because it gives information to the input, ex, button was pressed, held, or released.
        controls.Character.Movement.performed += context => moveInput = context.ReadValue<Vector2>();
        controls.Character.Movement.canceled += context => moveInput = Vector2.zero;

        //what this does is when we enter the run action it returns the running speed.
        controls.Character.Run.performed += context =>
        {
            speed = runSpeed;
            isRunning = true;
        };
        //this will return back to the walk speed when the character is no longer running.
        controls.Character.Run.canceled += context =>
        {
            speed = walkSpeed;
            isRunning = false;
        };
    }

    private void Start()
    {
        //getting reference from the player script so we dont need a new instance.
        player = GetComponent<Player>();

        // since we made characterController private, we can assign the character Controller component to the player movement script by using a start function.
        characterController = GetComponent<CharacterController>();

        //assign the animator to the start function.
        //you want to use GetComponent(InChildren) because we are using the animator as a child object currently.
        animator = GetComponentInChildren<Animator>();

        // this is needed since if you dont cancel the input it will be 0.
        speed = walkSpeed;

        //moved this from awake to the start function since we now have a Player script.
        AssignInputEvents();
    }

    //Update is used for player movements.
    private void Update()
    {
        ApplyMovement();

        ApplyRotation();

        AnimatorControllers();
    }


    private void AnimatorControllers()
    {
        //this is the code for horizontal movement for the animator.
        //we need .Dot because the character is constantly rotating.
        float xVelocity = Vector3.Dot(movementDirection.normalized, transform.right);
        //this is the code for the vertical movement for the animator.
        float zVelocity = Vector3.Dot(movementDirection.normalized, transform.forward);
        //this is the code of how we pass the information above to the animator.
        //add .1f,Time.deltaTime to damp the animation transition and make it more smooth.
        animator.SetFloat("xVelocity", xVelocity, .1f, Time.deltaTime);
        animator.SetFloat("zVelocity", zVelocity, .1f, Time.deltaTime);

        //this will fix the bug from preventing the character doing the running animation if the player stops running but doesnt stop holding shift.
        //This prevents the character from running while he is standing still.
        bool playRunAnimation = isRunning && movementDirection.magnitude > 0;
        animator.SetBool("isRunning", playRunAnimation);

    }

    private void ApplyRotation()
    {
        // this is for looking direction.
        Vector3 lookingDirection = player.aim.GetMousePosition() - transform.position;
        lookingDirection.y = 0f;
        //normalize is used like a vector except it doesnt have or need a length. (its similar to being a bubble that is around your character).
        lookingDirection.Normalize();

        //Quaternion is a complex mathmatical representation of rotation.
        Quaternion desiredRotaion = Quaternion.LookRotation(lookingDirection);

        //This is let the gun rotate before the player giving it an animation of moving the gun before the body.
        //Slerp allows to to smooth a transformation from one value to another.
        transform.rotation = Quaternion.Slerp(transform.rotation, desiredRotaion, turnSpeed * Time.deltaTime);

    }

    //this function is for player movement which is called in the update function.
    private void ApplyMovement()
    {
        //sets the movement direction for the x and y axis.
        movementDirection = new Vector3(moveInput.x, 0, moveInput.y);
        //applying gravity so that the character falls down to the ground.
        ApplyGravity();

        //lets the character actual move based of players movement inputs.
        if (movementDirection.magnitude > 0)
        {
            //its important to add time.deltaTime because without it, it will register the input once every millisecond the button is pressed (making the character fly off screen).
            //Time.deltaTime is measured by frames and counts per second.(helps keep the speed in check).
            // multiply Time.deltaTime and walkSpeed to get the movement speed you want for the character.
            characterController.Move(movementDirection * Time.deltaTime * speed);
        }
    }
    //This is where we define gravity.
    private void ApplyGravity()
    {
        //we are checking if the character is grounded(touching the floor or not).
        if (characterController.isGrounded == false)
        {
            //Character falls if not touching ground.
            verticalVelocity = verticalVelocity - 9.81f * Time.deltaTime;
            movementDirection.y = verticalVelocity;
        }
        //if the character is grounded.
        else
            verticalVelocity = -.5f;
    }


}
