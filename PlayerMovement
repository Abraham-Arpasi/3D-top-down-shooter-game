using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
//below is put here since we are setting up the input systems for the movement.
using UnityEngine.InputSystem;
public class PlayerMovement : MonoBehaviour
{
    private PlayerControls controls;

    //This allows us control over the character controller component on the player object.
    private CharacterController characterController;

    //Header is used to help organize the information shown on the script component.
    [Header("movement info")]
    //before we move the character we need to know which direction we are moving the character.
    private Vector3 movementDirection;
    //this is for setting up the speed of the characters movement.
    //SerializeField lets you see the variable in the script component when it is made private.
    [SerializeField]private float walkSpeed;

    //This is the variable for setting up for gravity.
    private float verticalVelocity;

    private Vector2 moveInput;
    private Vector2 aimInput;

    //the awake function is used to fill up the script with information since the controls are empty.
    private void Awake()
    {
        controls = new PlayerControls();

        //gives access to the controls to the action map to the actions.
        //add context because it gives information to the input, ex, button was pressed, held, or released.
        controls.Character.Movement.performed += context => moveInput = context.ReadValue<Vector2>();
        controls.Character.Movement.canceled += context => moveInput = Vector2.zero;

        controls.Character.Aim.performed += context => aimInput = context.ReadValue<Vector2>();
        controls.Character.Aim.canceled += context => aimInput = Vector2.zero;
    }

    private void Start()
    {
        // since we made characterController private, we can assign the character Controller component to the player movement script by using a start function.
        characterController = GetComponent<CharacterController>();
    }

    //Update is used for player movements.
    private void Update()
    {
        ApplyMovement();
    }

    //this function is for player movement which is called in the update function.
    private void ApplyMovement()
    {
        //sets the movement direction for the x and y axis.
        movementDirection = new Vector3(moveInput.x, 0, moveInput.y);
        //applying gravity so that the character falls down to the ground.
        ApplyGravity();

        //lets the character actual move based of players movement inputs.
        if (movementDirection.magnitude > 0)
        {
            //its important to add time.deltaTime because without it, it will register the input once every millisecond the button is pressed (making the character fly off screen).
            //Time.deltaTime is measured by frames and counts per second.(helps keep the speed in check).
            // multiply Time.deltaTime and walkSpeed to get the movement speed you want for the character.
            characterController.Move(movementDirection * Time.deltaTime * walkSpeed);
        }
    }
    //This is where we define gravity.
    private void ApplyGravity()
    {
        //we are checking if the character is grounded(touching the floor or not).
        if (characterController.isGrounded == false)
        {
            //Character falls if not touching ground.
            verticalVelocity = verticalVelocity - 9.81f * Time.deltaTime;
            movementDirection.y = verticalVelocity;
        }
        //if the character is grounded.
        else
            verticalVelocity = -.5f;
    }

    private void OnEnable()
    {
        controls.Enable(); 
    }

    private void OnDisable()
    {
        controls.Disable();
    }
}
