using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using UnityEngine;

public class Enemy_Grenade : MonoBehaviour
{
    [SerializeField] private GameObject explosionFx;
    [SerializeField] private float impactRadius;
    [SerializeField] private float upwardsmultipler = 1;
    private Rigidbody rb;
    private float timer;
    private float impactPower;

    private LayerMask allyLayerMask;
    private bool canExplode = true;

    private int grenadeDamage;

    private void Awake() => rb = GetComponent<Rigidbody>();

    private void Update()
    {
        timer -= Time.deltaTime;

        if (timer < 0 && canExplode)
            Explode();
    }

    private void Explode()
    {
        canExplode = false;

        PlayExplosionFx();

        HashSet<GameObject> uniqueEntities = new HashSet<GameObject>(); 

        Collider[] colliders = Physics.OverlapSphere(transform.position, impactRadius);

        foreach (Collider hit in colliders)
        {
            IDamageable damagable = hit.GetComponent<IDamageable>();

            if (damagable != null)
            {
            
            if (IsTargetValid(hit) == false)
                continue;

            GameObject rootEntity = hit.transform.root.gameObject;
            if (uniqueEntities.Add(rootEntity) == false)
                continue;

                damagable.TakeDamage(grenadeDamage);
            }

            ApplyPhysicalForceTo(hit);
        }

        ObjectPool.instance.ReturnObject(gameObject);
    }

    private void ApplyPhysicalForceTo(Collider hit)
    {
        Rigidbody rb = hit.GetComponent<Rigidbody>();
        if (rb != null)
            rb.AddExplosionForce(impactPower, transform.position, impactRadius, upwardsmultipler, ForceMode.Impulse);
    }

    private void PlayExplosionFx()
    {
        GameObject newFx = ObjectPool.instance.GetObject(explosionFx, transform);
        ObjectPool.instance.ReturnObject(newFx, 0.1f);
        ObjectPool.instance.ReturnObject(gameObject);
    }

    public void SetupGrenade(LayerMask allyLayerMask, Vector3 target, float timeToTarget, float countdown, float impactPower, int grenadeDamage)
    {
        canExplode = true;

        this.grenadeDamage = grenadeDamage;
        this.allyLayerMask = allyLayerMask;

        rb.velocity = CalculateLaunchVelocity(target, timeToTarget);
        //grenade counts down once it hits the ground when going towards its target.
        timer = countdown + timeToTarget;
        this.impactPower = impactPower;
    }

    private bool IsTargetValid(Collider collider)
    {
        //If fiendly fire is enabled, all colliders are valid targets.
        if (GameManager.Instance.friendlyFire)
            return true;

        //if collider is on allylayer, target is not valid.
        if((allyLayerMask.value & (1 << collider.gameObject.layer)) > 0)
                return false;

        return true;
    }

    //this will be how the grenade flys through the air.
    private Vector3 CalculateLaunchVelocity(Vector3 target, float timeToTarget)
    {
        //direction of grenade.
        Vector3 direction = target - transform.position;
        //X and Z direction for the grenade.
        Vector3 directionXZ = new Vector3(direction.x, 0, direction.z);

        //X and Z velocity for the grenade.
        Vector3 velocityXZ = directionXZ / timeToTarget;

        //math formula for the Y velocity for the grenade.
        float velocityY = (direction.y - (Physics.gravity.y * Mathf.Pow(timeToTarget, 2)) / 2) / timeToTarget;

        Vector3 launchVelocity = velocityXZ + Vector3.up * velocityY;

        return launchVelocity;
    }

    private void OnDrawGizmos()
    {
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(transform.position, impactRadius);
    }
}
