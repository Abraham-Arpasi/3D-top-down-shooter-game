using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum WeaponType
{
    Pistol,
    Revolver,
    Rifle,
    Shotgun,
    Sniper
}

//this will switch weapon from semi-auto to full auto fire rate.
public enum ShootType
{
    single, 
    auto
}

//this makes the class visible in the inspector.
[System.Serializable]

//removed monobehaviour since this script wont be using start or update function.
public class Weapon
{

    public WeaponType weaponType;
    public ShootType shootType;
    public bool burstActive;

    public int bulletDamage;

    [Header("Magazine info")]
    //varaibles for the bullets and reload requirements.
    public int bulletsInMagazine;
    public int magazineCapacity;
    public int totalReserveAmmo;


    //this will be used in the weapon data so it doesn't need to be seen in the inspector.
    // this will set the speed of reload and switching weapons with a default of 1 and a range between 1 and 2.
    public float reloadSpeed { get; private set; }
    public float equipmentSpeed { get; private set; }
    //this will be the range for the gun distance.
    //this will determine how far the bullets will fly.
    public float gunDistance { get; private set; } //this is the default value of gunDistance.
    //this will be the range for the camera distance
    public float cameraDistance { get; private set; } //this is the default value of cameraDistance.

    public int bulletsPerShot { get; private set; }
    private float defaultFireRate;
    public float fireRate = 1;
    private float lastShootTime;

    //this for setting up the burst fire mode for the weapom.
    private bool burstAvailable;

    private int burstBulletsPerShot;
    private float burstFireRate;
    public float burstFireDelay { get; private set; }

    [Header("Spread info")]
    //the spread of the bullets will increase to a max of 3.
    private float baseSpread = 1;
    private float currentSpread = 2;
    private float maximumSpread = 3;
    //this will make the bullets spread grow larger over time as the character keeps shooting.
    private float spreadIncreaseRate = 0.15f;
    //this will be used to reset the bullet spread if not shooting.
    private float lastSpreadUpdateTime;
    private float spreadCooldown = 1;

    public Weapon_Data weaponData {  get; private set; } //serves as default weapon data.

    //creating a constructor.
    //this will be seen in the weapon data which can be changed there.
    public Weapon(Weapon_Data weaponData)
    {
        bulletDamage = weaponData.bulletDamage;
        bulletsInMagazine = weaponData.bulletsInMagazine;
        magazineCapacity = weaponData.magazineCapacity;
        totalReserveAmmo = weaponData.totalReserveAmmo;

        fireRate = weaponData.fireRate;
        weaponType = weaponData.weaponType;

        bulletsPerShot = weaponData.bulletsPerShot;
        shootType = weaponData.shootType;

        burstAvailable = weaponData.burstAvalible;
        burstActive = weaponData.burstActive;
        burstBulletsPerShot = weaponData.burstBulletsPerShot;
        burstFireRate = weaponData.burstFireRate;
        burstFireDelay = weaponData.burstFireDelay;

        baseSpread = weaponData.baseSpread;
        maximumSpread = weaponData.maxSpread;
        spreadIncreaseRate = weaponData.spreadIncreaseRate;

        reloadSpeed = weaponData.reloadSpeed;
        equipmentSpeed = weaponData.equipmentSpeed;
        gunDistance = weaponData.gunDistance;
        cameraDistance = weaponData.cameraDistance;

        defaultFireRate = fireRate;
        this.weaponData = weaponData;
    }

    public Vector3 ApplySpread(Vector3 originalDirection)
    {
        UpdateSpread();

        float randomizedValue = Random.Range(-currentSpread, currentSpread);

        Quaternion spreadRotation = Quaternion.Euler(randomizedValue, randomizedValue / 2, randomizedValue);

        return spreadRotation * originalDirection;
    }

    //this will reset the spread that was increaseing when not shooting.
    private void UpdateSpread()
    {
        //this checks if the amount of time in the game is bigger than the amount of time the spread updated it will reset.
        //else it increases the spread if update time is shorter than the game time.
        //simply, if not holding down the trigger it will reset and if holding down the trigger it will keep growing.
        if (Time.time > lastSpreadUpdateTime + spreadCooldown)
            currentSpread = baseSpread;
        else
            IncreaseSpread();
        
        
        
        lastSpreadUpdateTime = Time.time;
    }

    private void IncreaseSpread()
    {
        //this will return the given value if it is within the range between the base value and maximum value.
        currentSpread = Mathf.Clamp(currentSpread + spreadIncreaseRate, baseSpread, maximumSpread);
    }

    public bool BurstActivated()
    {
        //this will make the burst mode always turned on for the Shotgun;
        if(weaponType == WeaponType.Shotgun)
        {
            burstFireDelay = 0;
            return true;
        }

        return burstActive;
    }
    public void ToggleBurst()
    {
        if (burstAvailable == false)
            return;

        burstActive = !burstActive;
        //when burst is active it sets to burst values.
        //changes the fire rate.
        if (burstActive)
        {
            bulletsPerShot = burstBulletsPerShot;
            fireRate = burstFireRate;
        }
        //when burst isn't active it sets to 1 bullet per shot.
        else
        {
            bulletsPerShot = 1;
            fireRate = defaultFireRate;
        }
    }

    //this will mkae sure the bullets in the magazine dont decrease when clicking unless the weapon fires.
    public bool CanShoot() => HaveEnoughBullets() && ReadyToFire();

    private bool ReadyToFire()
    {
        //this will calculate how many bullets the weapon can shoot per second. 
        if(Time.time > lastShootTime + 1 / fireRate)
        {
            lastShootTime = Time.time;
            return true;
        }

        return false;
    }

    private bool HaveEnoughBullets() => bulletsInMagazine > 0;

    // this will let you reload if there is still ammo left in the weapon.
    public bool canReload()
    {
        //check to make sure that weapon cant reload if weapon is full.
        if (bulletsInMagazine == magazineCapacity)
            return false;

        if(totalReserveAmmo > 0)
        {
            return true;
        }
        return false;
    }

    //adds bullets back into the weapon when reloaded.
    public void RefilledBullets()
    {

        //when reloading, the bullets will be put back into the ammo reserve.
        totalReserveAmmo += bulletsInMagazine;


        //when reloading, all bullets in the magazine will be lost.
        int bulletsToReload = magazineCapacity;
        if (bulletsToReload > totalReserveAmmo)
            bulletsToReload = totalReserveAmmo;

        totalReserveAmmo -= bulletsToReload;
        bulletsInMagazine = bulletsToReload;
        if (totalReserveAmmo < 0)
            totalReserveAmmo = 0;
    }
}
