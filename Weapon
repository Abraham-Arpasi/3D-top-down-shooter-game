using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum WeaponType
{
    Pistol,
    Revolver,
    Rifle,
    Shotgun,
    Sniper
}

//this makes the class visible in the inspector.
[System.Serializable]

//removed monobehaviour since this script wont be using start or update function.
public class Weapon
{
    public WeaponType weaponType;

    //varaibles for the bullets and reload requirements.
    public int bulletsInMagazine;
    public int magazineCapacity;
    public int totalReserveAmmo;

    // this will set the speed of reload and switching weapons with a default of 1 and a range between 1 and 2.
    [Range(1,5)]
    public float reloadSpeed = 1;
    [Range(1, 5)]
    public float equipmentSpeed = 1;

    [Space]
    public float fireRate = 1;

    private float lastShootTime;


    public bool CanShoot()
    {
        //this will mkae sure the bullets in the magazine dont decrease when clicking unless the weapon fires.
        if (HaveEnoughBullets() && ReadyToFire())
        {
            bulletsInMagazine--;
            return true;
        }

        return false;
    }

    private bool ReadyToFire()
    {
        //this will calculate how many bullets the weapon can shoot per second. 
        if(Time.time > lastShootTime + 1 / fireRate)
        {
            lastShootTime = Time.time;
            return true;
        }

        return false;
    }

    private bool HaveEnoughBullets() => bulletsInMagazine > 0;

    // this will let you reload if there is still ammo left in the weapon.
    public bool canReload()
    {
        //check to make sure that weapon cant reload if weapon is full.
        if (bulletsInMagazine == magazineCapacity)
            return false;

        if(totalReserveAmmo > 0)
        {
            return true;
        }
        return false;
    }

    //adds bullets back into the weapon when reloaded.
    public void RefilledBullets()
    {

        //when reloading, the bullets will be put back into the ammo reserve.
        totalReserveAmmo += bulletsInMagazine;


        //when reloading, all bullets in the magazine will be lost.
        int bulletsToReload = magazineCapacity;
        if (bulletsToReload > totalReserveAmmo)
            bulletsToReload = totalReserveAmmo;

        totalReserveAmmo -= bulletsToReload;
        bulletsInMagazine = bulletsToReload;
        if (totalReserveAmmo < 0)
            totalReserveAmmo = 0;
    }
}
