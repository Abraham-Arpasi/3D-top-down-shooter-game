using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using static Cinemachine.DocumentationSortingAttribute;

public enum EnemyType { Melee, Range, Boss, Random}

//this will attach a navmeshagent to whatever inherits from the enemy.
[RequireComponent(typeof(NavMeshAgent))]
public class Enemy : MonoBehaviour
{
    public EnemyType enemyType;
    public LayerMask whatIsAlly;
    public LayerMask whatIsPlayer;

    [Header("Idle Info")]
    public float idleTime;
    public float aggresionRange;

    [Header("Move Info")]
    public float walkSpeed = 1.5f;
    public float runSpeed = 3;
    public float turnSpeed;
    private bool manualMovement;
    //this will be used for the enemy rotation when attacking.
    private bool manualRotation;
    //this will make the patrol points better.
    private Vector3[] patrolPointsPosition;
    [SerializeField] private Transform[] patrolPoints;
    private int currentPatrolIndex;

    [Header("Souls Amount")]
    public Stat soulsDropAmount;

    [Header("Popup Text")]
    [SerializeField] private GameObject popUpTextPrefab;
    //[SerializeField] private Transform popUpSpawnPoint;

    [Header("Level details")]
    [SerializeField] private int level = 1;
    [Range(0f, 1f)]
    [SerializeField] private float percantageModifier = .4f;

    public bool inBattleMode { get; private set; }
    protected bool isMeleeAttackReady;

    public Transform player { get; private set; }

    public Animator anim { get; private set; }
    public NavMeshAgent agent { get; private set; }
    public EnemyStateMachine stateMachine { get; private set; }
    public Enemy_Visuals visuals { get; private set; }
    public Ragdoll ragdoll { get; private set; }
    public Enemy_Health health { get; private set; }
    public Enemy_DropController dropController { get; private set; }
    public AudioManager audioManager { get; private set; }

    protected virtual void Awake()
    {
        stateMachine = new EnemyStateMachine();

        health = GetComponent<Enemy_Health>();
        ragdoll = GetComponent<Ragdoll>();
        visuals = GetComponent<Enemy_Visuals>();
        agent = GetComponent<NavMeshAgent>();
        anim = GetComponentInChildren<Animator>();
        dropController = GetComponent<Enemy_DropController>();
        player = GameObject.Find("Player").GetComponent<Transform>();

    }

    protected virtual void Start()
    {
        InitializePatrolPoints();

        soulsDropAmount.SetDefaultValue(100);

        audioManager = AudioManager.instance;
    }

    //this will make the patrol points better and cleaner.
    private void InitializePatrolPoints()
    {
        patrolPointsPosition = new Vector3[patrolPoints.Length];

        for(int i = 0; i < patrolPoints.Length; i++)
        {
            patrolPointsPosition[i] = patrolPoints[i].position;
            patrolPoints[i].gameObject.SetActive(false);
        }
    }

    protected virtual void Update()
    {
        if (ShouldEnterBattleMode())
        {
            EnterBattleMode();
        }
    }
    public void CreatePopUpText(string _text)
    {
        float randomX = Random.Range(-1, 1);
        float randomY = Random.Range(1.5f, 3);

        Vector3 positionOffset = new Vector3(randomX, randomY, 0);

        GameObject newText = Instantiate(popUpTextPrefab, transform.position + positionOffset, Quaternion.identity);

        newText.GetComponent<TextMeshPro>().text = _text;
    }


    protected virtual void InitializePerk()
    {
    }
    private void Modify(Stat _stat)
    {
        for (int i = 1; i < level; i++)
        {
            float modifier = _stat.GetValue() * percantageModifier;

            _stat.AddModifier(Mathf.RoundToInt(modifier));
        }
    }

    public virtual void MakeEnemyVIP()
    {
        //increase the health of vip enemies by 25%
        int additionHealth = Mathf.RoundToInt(health.currentHealth * 1.25f);

        health.currentHealth += additionHealth;

        //incease the height of vip enemies
        transform.localScale = transform.localScale * 1.1f;
    }

    //this will check if enemy should enter battle mode.
    protected bool ShouldEnterBattleMode()
    {
        if(IsPlayerInAgressionRange() && !inBattleMode)
        {
            EnterBattleMode();
            return true;
        }
        return false;
    }
    public virtual void EnterBattleMode()
    {
        inBattleMode = true;
    }
    public virtual void GetHit(int damage)
    {
        EnterBattleMode();
        health.ReduceHealth(damage);
        if (health.ShouldDie())
        {
            Die();
        }

    }

    public virtual void Die()
    {
        dropController.DropItems();

        //this will turn off the animator and turn on nav Stopped when enemy is dead.
        anim.enabled = false;
        agent.isStopped = true;
        agent.enabled = false;

        ragdoll.RagdollActive(true);

        PlayerManager.instance.currency += soulsDropAmount.GetValue();
        FindObjectOfType<UI_Upgrade>().UpdateSoulsImmediately();

        MissionObject_HuntTarget huntTarget = GetComponent<MissionObject_HuntTarget>();
        huntTarget?.InvokeOnTargetKilled();
    }
    public void MeleeAttackCheck(Transform[] damagePoints, float attackCheckRadius, GameObject fx, int damage)
    {
        if (isMeleeAttackReady == false)
            return;

        foreach (Transform attackPoint in damagePoints)
        {
            Collider[] detectedHits = Physics.OverlapSphere(attackPoint.position, attackCheckRadius, whatIsPlayer);

            for (int i = 0; i < detectedHits.Length; i++)
            {
                IDamageable damagable = detectedHits[i].GetComponent<IDamageable>();

                if (damagable != null)
                {
                    damagable?.TakeDamage(damage);
                    isMeleeAttackReady = false;
                    GameObject newAttackFx = ObjectPool.instance.GetObject(fx, attackPoint);
                    ObjectPool.instance.ReturnObject(newAttackFx, 0.1f);
                    return;
                }
            }
        }
    }

    public void EnableMeleeAttackCheck(bool enable) => isMeleeAttackReady = enable;

    public virtual void BulletImpact(Vector3 force, Vector3 hitPoint, Rigidbody rb)
    {
        if (health.ShouldDie())
        {
        StartCoroutine(DeathImpactCoroutine(force, hitPoint, rb));
        }
    }

    private IEnumerator DeathImpactCoroutine(Vector3 force, Vector3 hitPoint, Rigidbody rb)
    {
        yield return new WaitForSeconds(0.1f);
        rb.AddForceAtPosition(force, hitPoint, ForceMode.Impulse);
    }

    public bool IsPlayerInAgressionRange() => Vector3.Distance(transform.position, player.position) < aggresionRange;

    //this will show the aggresion range of the enemy.
    protected virtual void OnDrawGizmos()
    {
        Gizmos.DrawWireSphere(transform.position, aggresionRange);
    }

    public void ActivateManualMovement(bool manualMovement) => this.manualMovement = manualMovement;
    public bool ManualMovementActive() => manualMovement;

    public void ActivateManualRotation(bool manualRotation) => this.manualRotation = manualRotation;
    public bool ManualRotationActive() => manualRotation;

    public void AnimationTrigger() => stateMachine.currentState.AnimationTrigger();

    //this will be used for when the enemy has multiple abilities like throwing axes or grenades
    public virtual void AbilityTrigger()
    {
        stateMachine.currentState.AbilityTrigger();
    }
    
    public Vector3 GetPatrolDestination()
    {
        Vector3 destination = patrolPointsPosition[currentPatrolIndex];
        Debug.Log(destination);

        currentPatrolIndex++;

        if(currentPatrolIndex >= patrolPoints.Length)
            currentPatrolIndex = 0;

        return destination;
    }
    //this will have the enemy rotate towards the target.
    public void FaceTarget(Vector3 target, float turnSpeed = 0)
    {
        Quaternion targetRotation = Quaternion.LookRotation(target - transform.position);

        Vector3 currentEulerAngels = transform.rotation.eulerAngles;

        if(turnSpeed == 0)
            turnSpeed = this.turnSpeed;

        float yRotation = Mathf.LerpAngle(currentEulerAngels.y, targetRotation.eulerAngles.y, turnSpeed * Time.deltaTime);

        transform.rotation = Quaternion.Euler(currentEulerAngels.x, yRotation, currentEulerAngels.z);
    }
}
