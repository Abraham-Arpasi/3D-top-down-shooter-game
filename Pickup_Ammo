using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public enum AmmoBoxType { smallBox, bigBox}

public class Pickup_Ammo : Interactable
{
    private PlayerWeaponController weaponController;

    [SerializeField] private AmmoBoxType boxType;

    [System.Serializable]

    public struct AmmoData
    {
        public WeaponType weaponType;
        //this will be used to get a random amount of bullets from the ammo box.
        [Range(10,100)] public int minAmount;
        [Range(10,100)] public int maxAmount;
    }

    [SerializeField] private List<AmmoData> smallBoxAmmo;
    [SerializeField] private List<AmmoData> bigBoxAmmo;

    [SerializeField] private GameObject[] boxModel;

    private void Start()
    {
        SetupBoxModel();
    }

    private void SetupBoxModel()
    {
        for (int i = 0; i < boxModel.Length; i++)
        {
            boxModel[i].SetActive(false);

            if (i == ((int)boxType))
            {
                boxModel[i].SetActive(true);
                UpdateMeshAndMaterial(boxModel[i].GetComponent<MeshRenderer>());
            }

        }
    }

    public override void Interaction()
    {
        //base.Interaction();

        List<AmmoData> currentAmmoList = smallBoxAmmo;

        if (boxType == AmmoBoxType.bigBox)
            currentAmmoList = bigBoxAmmo;

        foreach (AmmoData ammo in currentAmmoList)
        {
            Weapon weapon = weaponController.WeaponInSlots(ammo.weaponType);

            AddBulletsToWeapon(weapon, GetBulletAmount(ammo));
        }
        //makes the box disappear after interacted with.
        ObjectPool.instance.ReturnObject(gameObject);

    }

    protected override void OnTriggerEnter(Collider other)
    {
        base.OnTriggerEnter(other);

        if(weaponController == null)
            weaponController = other.GetComponent<PlayerWeaponController>();
    }

    private int GetBulletAmount(AmmoData ammoData)
    {
        //this will add a random amount of bullets to the weapon from the min and max amount.
        float min = Mathf.Min(ammoData.minAmount, ammoData.maxAmount);
        float max = Mathf.Max(ammoData.minAmount, ammoData.maxAmount);

        float randomAmmoAmount = Random.Range(min, max);

        return Mathf.RoundToInt(randomAmmoAmount);
    }

    private void AddBulletsToWeapon(Weapon weapon, int amount)
    {
        if (weapon == null)
            return;

        weapon.totalReserveAmmo += amount;
    }
}
