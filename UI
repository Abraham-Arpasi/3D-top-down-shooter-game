using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.UI;

public class UI : MonoBehaviour
{
    public static UI instance;

    public UI_InGame inGameUI { get; private set; }
    
    [SerializeField] private GameObject mainMenuUI;
    [SerializeField] private GameObject Settings;
    [SerializeField] private GameObject Credits;
    [SerializeField] private GameObject WeaponSelection;
    [SerializeField] private GameObject MissionSelection;
    [SerializeField] private GameObject ComicPanel;
    [SerializeField] private GameObject VictoryScreen;
    [SerializeField] private GameObject GameOver;
    [SerializeField] private GameObject Upgrade;
    public UI_WeaponSelection weaponSelection {  get; private set; }
    public UI_GameOver gameOverUI { get; private set; }
    public UI_Settings settingsUI {  get; private set; }

    public GameObject victoryScreenUI;

    [SerializeField] private GameObject[] UIElements;
    public GameObject pauseUI;


    [Header("Fade Image")]
    [SerializeField] private Image fadeImage;

    private void Awake()
    {
        instance = this;
        inGameUI = GetComponentInChildren<UI_InGame>(true);  
        weaponSelection = GetComponentInChildren<UI_WeaponSelection>(true);
        gameOverUI = GetComponentInChildren<UI_GameOver>(true);
        settingsUI = GetComponentInChildren<UI_Settings>();
    }

    private void Start()
    {
        AssignInputsUI();

        Settings.SetActive(true);
        settingsUI.LoadSettings();
        Settings.SetActive(false);

        StartCoroutine(ChangeImageAlpha(0, 1.5f, null));
        
        if (GameManager.Instance.quickStart)
        {
            LevelGenerator.instance.InitalizeGeneration();
            StartTheGame();
        }
       

    }

    public void SwitchTo(GameObject uiToSwitchOn)
    {
        foreach(GameObject go in UIElements)
        {
            go.SetActive(false);
        }

        if (uiToSwitchOn == null)
        {
            Debug.LogWarning("UI.SwitchTo was called with a null reference.");
            return;
        }

        uiToSwitchOn.SetActive(true);

        if(uiToSwitchOn == inGameUI.gameObject)
        {
            Cursor.visible = false;
        }
        else
        {
            Cursor.visible = true;
        }

        if (uiToSwitchOn == settingsUI.gameObject)
            settingsUI.LoadSettings();
    }

    public void StartTheGame()
    {
        StartCoroutine(StartGameSequence());
    }

    public void QuitGame()
    {
        Application.Quit();
    }

    public void StartLevelGeneration()
    {
        LevelGenerator.instance.InitalizeGeneration();
    }

    public void RestartTheGame()
    {
        StartCoroutine(ChangeImageAlpha(1, 1f, GameManager.Instance.RestartScene));
    }

    public void PauseSwitch()
    {
        if (mainMenuUI != null && mainMenuUI.activeSelf || 
            Settings != null && Settings.activeSelf || 
            Credits != null && Credits.activeSelf || 
            WeaponSelection != null && WeaponSelection.activeSelf || 
            MissionSelection != null && MissionSelection.activeSelf || 
            ComicPanel != null && ComicPanel.activeSelf || 
            VictoryScreen != null && VictoryScreen.activeSelf || 
            GameOver != null && GameOver.activeSelf || 
            Upgrade != null && Upgrade.activeSelf) 
        {
            return;
        }

        bool gamePaused = pauseUI.activeSelf;

        if (gamePaused)
        {
            SwitchTo(inGameUI.gameObject);
            ControlManager.instance.SwitchToCharacterControls();
            TimeManager.instance.ResumeTime();
            Cursor.visible = false;
        }
        else
        {
            SwitchTo(pauseUI);
            ControlManager.instance.SwitchToUIControls();
            TimeManager.instance.PauseTime();
            Cursor.visible = false;
        }
    }

    public void UpgradeSwitch()
    {
        if (mainMenuUI != null && mainMenuUI.activeSelf ||
            Settings != null && Settings.activeSelf ||
            Credits != null && Credits.activeSelf ||
            WeaponSelection != null && WeaponSelection.activeSelf ||
            MissionSelection != null && MissionSelection.activeSelf ||
            ComicPanel != null && ComicPanel.activeSelf ||
            VictoryScreen != null && VictoryScreen.activeSelf ||
            GameOver != null && GameOver.activeSelf ||
            pauseUI != null && pauseUI.activeSelf)
            
        {
            return;
        }

        bool gamePaused = Upgrade.activeSelf;

        if (gamePaused)
        {
            SwitchTo(inGameUI.gameObject);
            ControlManager.instance.SwitchToCharacterControls();
            TimeManager.instance.ResumeTime();
        }
        else
        {
            SwitchTo(Upgrade);
            RefreshAllStatSlots();
            ControlManager.instance.SwitchToUIControls();
            TimeManager.instance.PauseTime();
        }

    }
    public void RefreshAllStatSlots()
    {
        // Assuming your stat slots are children somewhere, e.g., inside Upgrade panel
        foreach (UI_StatSlot slot in GetComponentsInChildren<UI_StatSlot>(true))
        {
            slot.UpdateStatValueUI();
        }
    }
   

    public void ShowGameOverUI(string message = "GAME OVER!")
    {
        SwitchTo(gameOverUI.gameObject);
        gameOverUI.ShowGameOverMessage(message);
    }

    private void AssignInputsUI()
    {
        PlayerControls controls = GameManager.Instance.player.controls;
        controls.UI.UIPause.performed += ctx => PauseSwitch();
        controls.UI.UIUpgrade.performed += ctx => UpgradeSwitch();
    }

    public void ShowVictoryScreenUI()
    {
        StartCoroutine(ChangeImageAlpha(1, 1.5f, SwitchToVictoryScreenUI));
    }

    private void SwitchToVictoryScreenUI()
    {
        SwitchTo(victoryScreenUI);

        Color color = fadeImage.color;
        color.a = 0;

        fadeImage.color = color;
    }

    private IEnumerator StartGameSequence()
    {
        
        bool quickStart = GameManager.Instance.quickStart;
        
        if(quickStart == false)
        {
            fadeImage.color = Color.black;
            StartCoroutine(ChangeImageAlpha(1, 1, null));
            yield return new WaitForSeconds(1);
        }

        yield return null;
        SwitchTo(inGameUI.gameObject);
        GameManager.Instance.GameStart();

        StartCoroutine(ChangeImageAlpha(0, 1f, null));
    }

    private IEnumerator ChangeImageAlpha(float targetAlpha, float duration, System.Action onComplete)
    {
        float time = 0;

        Color currentColor = fadeImage.color;
        float startAlpha = currentColor.a;

        while(time < duration)
        {
            time += Time.deltaTime;
            float alpha = Mathf.Lerp(startAlpha, targetAlpha, time / duration);

            fadeImage.color = new Color(currentColor.r, currentColor.g, currentColor.b, alpha);
            yield return null;
        }

        fadeImage.color = new Color(currentColor.r, currentColor.g, currentColor.b, targetAlpha);

        //call the completion method if it exists
        onComplete?.Invoke();
    }
    [ContextMenu("Assign Audio To Buttons")]
    public void AssignAudioListenersToButtons()
    {
        UI_Button[] buttons = FindObjectsOfType<UI_Button>(true);

        foreach (var button in buttons)
        {
            button.AssignAudioSource();
        }
    }
}
