using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Enemy_AnimationEvents : MonoBehaviour
{
    private Enemy enemy;
    private Enemy_Melee enemyMelee;
    private Enemy_Boss enemyBoss;

    private void Awake()
    {
        enemy = GetComponentInParent<Enemy>();
        enemyMelee = GetComponentInParent<Enemy_Melee>();
        enemyBoss = GetComponentInParent<Enemy_Boss>();

    }

    public void AnimationTrigger() => enemy.AnimationTrigger();

    //this will help stop the enemy from sliding when stopped attacking.
    public void StartManualMovement() => enemy.ActivateManualMovement(true);
    public void StopManualMovement() => enemy.ActivateManualMovement(false);

    //this will have the enemy rotate towards the player when attacking.
    public void StartManualRotation() => enemy.ActivateManualRotation(true);
    public void StopManualRotation() => enemy.ActivateManualRotation(false);
    public void AbilityEvent() => enemy.AbilityTrigger();
    //this will let us be able to delay the lefthand moving back to weapon.
    public void EnableIK() => enemy.visuals.EnableIK(true, true, 1.5f);
    //this will help with the smoothness of the gun visuals after throwing grenade.
    public void EnableWeaponModel()
    {
        enemy.visuals.EnableWeaponModel(true);
        enemy.visuals.EnableSecondaryWeaponModel(false);
    }

    public void BossJumpImpact()
    {
        if (enemyBoss == null)
            enemyBoss = GetComponentInParent<Enemy_Boss>();

        enemyBoss?.JumpImpact();
    }

    public void BeginMeleeAttackCheck()
    {
        enemyMelee?.EnableAttackCheck(true);
    }

    public void FinishMeleeAttackCheck()
    {
        enemyMelee?.EnableAttackCheck(false);
    }
}
