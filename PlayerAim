using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerAim : MonoBehaviour
{
    // set up references to other scripts.
    private Player player;
    private PlayerControls controls;

    [Header("Aim info")]
    //This will be change the camera view to pan towards where the character is aiming.
    [Range(.5f,1)]
    [SerializeField] private float minCameraDistance = 1.5f;
    [Range(1,3f)]
    [SerializeField] private float maxCameraDistance = 4f;

    [Range(3f, 5f)]
    [SerializeField] private float aimSensitivity = 5f;

    [SerializeField] private Transform aim;
    //This mask is for the aim physics detection.
    [SerializeField] private LayerMask aimLayerMask;
   
    private Vector2 aimInput;

    private void Start()
    {
        player = GetComponent<Player>();
       
        AssignInputEvents();

    }

    private void Update()
    {
        //this will make it so that the  player aims at a leveled position no matter the height.
        aim.position = Vector3.Lerp(aim.position, DesiredAimPosition(), aimSensitivity * Time.deltaTime);
    }
    
    //This will have the camera position it self where the character is aiming.
    private Vector3 DesiredAimPosition()
    {
        //this should help prevent the character from going off the screen
       float actualMaxCameraDistance = player.movement.moveInput.y < -.5f ? minCameraDistance : maxCameraDistance;
        
        //float actualMaxCameraDistance;
        //bool movingDownwards = player.movement.moveInput.y < -.5f;

        //if (movingDownwards)
        //{
        //    actualMaxCameraDistance = minCameraDistance;
        //}
        //else
        //    actualMaxCameraDistance = maxCameraDistance;



        Vector3 desiredAimPosition = GetMouseHitInfo();
        Vector3 aimDirection = (desiredAimPosition - transform.position).normalized;

        //this will check what the distance between the character and aim transform.
        float distanceToDesiredPosition = Vector3.Distance(transform.position, desiredAimPosition);
        //check if it is out of the circle.
        //clamp makes sure to have the camera stay in the circle.
        float clampDistance = Mathf.Clamp(distanceToDesiredPosition, minCameraDistance, actualMaxCameraDistance);
        desiredAimPosition = transform.position + aimDirection * clampDistance;
        desiredAimPosition.y = transform.position.y + 1;


        return desiredAimPosition;
    }

    public RaycastHit GetMouseHitInfo()
    {
        //This is for setting up the character aim.
        Ray ray = Camera.main.ScreenPointToRay(aimInput);
        //We are going to check if ray hits something.
        if (Physics.Raycast(ray, out var hitInfo, Mathf.Infinity, aimLayerMask))
        {
            return hitInfo;
        }

            return default;
    }

    private void AssignInputEvents()
    {
        controls = player.controls;

        controls.Character.Aim.performed += context => aimInput = context.ReadValue<Vector2>();
        controls.Character.Aim.canceled += context => aimInput = Vector2.zero;
    }
}
