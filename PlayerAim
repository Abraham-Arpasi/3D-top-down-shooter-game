using System;
using System.Collections;
using System.Collections.Generic;
using System.Transactions;
using UnityEngine;

public class PlayerAim : MonoBehaviour
{
    // set up references to other scripts.
    private Player player;
    private PlayerControls controls;

    [Header("Aim Laser")]
    [SerializeField] private LineRenderer aimLaser;

    [Header("Aim Info")]
    [SerializeField] private Transform aim;

    //this will be for the precise aim of the gun.
    [SerializeField] bool isAimingPrecisly;

    //this will be for the target lock.
    [SerializeField] private bool isLockingToTarget;

    [Header("Camera info")]
    [SerializeField] private Transform cameraTarget;
    //This will be change the camera view to pan towards where the character is aiming.
    [Range(.5f,1)]
    [SerializeField] private float minCameraDistance = 1.5f;
    [Range(1,3f)]
    [SerializeField] private float maxCameraDistance = 4f;

    [Range(3f, 5f)]
    [SerializeField] private float cameraSensitivity = 5f;

    //This mask is for the aim physics detection.
    [SerializeField] private LayerMask aimLayerMask;
   
    private Vector2 mouseInput;
    private RaycastHit lastKnownMouseHit; 

    private void Start()
    {
        player = GetComponent<Player>();
       
        AssignInputEvents();

    }

    private void Update()
    {
        if(player.health.isDead)
            return;

        //simple input to switch on precise aim or switch off.
        if(Input.GetKeyDown(KeyCode.P))
            isAimingPrecisly = !isAimingPrecisly;

        //this will switch the target lock on and off.
        if (Input.GetKeyDown(KeyCode.L))
            isLockingToTarget = !isLockingToTarget;

        //this will set aim position to the level of the character if aim is not precise.
        UpdateAimPosition();

        UpdateCameraPosition();

        UpdateAimVisuals();
    }

    private void UpdateAimVisuals()
    {
        //if character is not ready then the laser will not update.
        aimLaser.enabled = player.weapon.WeaponReady();

        if (aimLaser.enabled == false)
            return;

        WeaponModel weaponModel = player.weaponVisuals.CurrentWeaponModel();

        //this updates the weapon rotation while aiming.
        weaponModel.transform.LookAt(aim);
        weaponModel.gunPoint.LookAt(aim);


        //make the length value a local variable instead of global.
        float laserTipLength = 0.5f;

        //this is setting up the position of the laser at the gun of the gun.
        Transform gunPoint = player.weapon.GunPoint();
        Vector3 laserDirection = player.weapon.BulletDirection();
        float gunDistance = player.weapon.CurrentWeapon().gunDistance;
        
        Vector3 endPoint = gunPoint.position + laserDirection * gunDistance;

        //this will check if the laser is hitting any walls and make sure the laser doesn't go through any objects.
        if(Physics.Raycast(gunPoint.position, laserDirection, out RaycastHit hit, gunDistance))
        {
            endPoint = hit.point;
            laserTipLength = 0;
        }
   
        aimLaser.SetPosition(0, gunPoint.position);
        aimLaser.SetPosition(1, endPoint);
        //this will make the laser transparent in the end.
        aimLaser.SetPosition(2, endPoint + laserDirection * laserTipLength);
    }

    //this will tell us if we have a target at the moment.
    public Transform Target()
    {
        Transform target = null;
        if(GetMouseHitInfo().transform.GetComponent<Target>() != null)
        {
            target = GetMouseHitInfo().transform;
        }

        return target;
    }

    private void UpdateCameraPosition()
    {
        //this will make it so that the  player aims at a leveled position no matter the height.
        cameraTarget.position = Vector3.Lerp(cameraTarget.position, DesiredCameraPosition(), cameraSensitivity * Time.deltaTime);
    }

    private void UpdateAimPosition()
    {
        Transform target = Target();

        if(target != null && isLockingToTarget)
        {
            //if the object has a renderer than have the targetlock look at the center instead of pivot point.
            if(target.GetComponent<Renderer>() != null)
            {
                aim.position = target.GetComponent<Renderer>().bounds.center;
            }
            else
            {
                aim.position = target.position;
            }

            return;
        }

        aim.position = GetMouseHitInfo().point;

        if (!isAimingPrecisly)
        {
            //this will make the aim position be where the mouse is pointing at.
            aim.position = new Vector3(aim.position.x, transform.position.y + 1, aim.position.z);
        }
    }

    public Transform Aim() => aim;

    public bool CanAimPrecisly() => isAimingPrecisly;
    
    
    //This will have the camera position it self where the character is aiming.
    private Vector3 DesiredCameraPosition()
    {
        //this should help prevent the character from going off the screen
       float actualMaxCameraDistance = player.movement.moveInput.y < -.5f ? minCameraDistance : maxCameraDistance;
        
        //float actualMaxCameraDistance;
        //bool movingDownwards = player.movement.moveInput.y < -.5f;

        //if (movingDownwards)
        //{
        //    actualMaxCameraDistance = minCameraDistance;
        //}
        //else
        //    actualMaxCameraDistance = maxCameraDistance;



        Vector3 desiredCameraPosition = GetMouseHitInfo().point;
        Vector3 aimDirection = (desiredCameraPosition - transform.position).normalized;

        //this will check what the distance between the character and aim transform.
        float distanceToDesiredPosition = Vector3.Distance(transform.position, desiredCameraPosition);
        //check if it is out of the circle.
        //clamp makes sure to have the camera stay in the circle.
        float clampDistance = Mathf.Clamp(distanceToDesiredPosition, minCameraDistance, actualMaxCameraDistance);
        desiredCameraPosition = transform.position + aimDirection * clampDistance;
        desiredCameraPosition.y = transform.position.y + 1;


        return desiredCameraPosition;
    }

    public RaycastHit GetMouseHitInfo()
    {
        //This is for setting up the character aim.
        Ray ray = Camera.main.ScreenPointToRay(mouseInput);
        //We are going to check if ray hits something.
        if (Physics.Raycast(ray, out var hitInfo, Mathf.Infinity, aimLayerMask))
        {
            //lastKnownMouseHit will make sure that the aim doesn't get messed up if not aiming at the ground or obstacle.
            lastKnownMouseHit = hitInfo;
            return hitInfo;
        }

            return lastKnownMouseHit;
    }

    private void AssignInputEvents()
    {
        controls = player.controls;

        controls.Character.Aim.performed += context => mouseInput = context.ReadValue<Vector2>();
        controls.Character.Aim.canceled += context => mouseInput = Vector2.zero;
    }
}
