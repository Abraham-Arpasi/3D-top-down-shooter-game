using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Bullet : MonoBehaviour
{
    //This will be for the VFX of the bullet impact.
    [SerializeField] private GameObject bulletImpactFX;

    [SerializeField] private Rigidbody rb;
    [SerializeField] private BoxCollider cd;
    
    //we are going to use the trail to make the bullet dissapear better after it reaches its gunDistance.
    [SerializeField] private TrailRenderer trailRenderer;
    [SerializeField] private MeshRenderer meshRenderer;


    //this will be used to see how far the bullets are flying.
    //we are going to use this along with PlayerAim's laser for how far the gun can shoot based of its weapon type.
    private Vector3 startPosition;
    private float flyDistance;
    private bool bulletDisabled;
    public void BulletSetup(float flyDistance)
    {
        bulletDisabled = false;
        cd.enabled = true;
        meshRenderer.enabled = true;

        trailRenderer.time = .25f;
        startPosition = transform.position;
        this.flyDistance = flyDistance + 0.6f;
    }

    private void Update()
    {
        //before the bullet reaches its max flyDistance we are going to get its trailRenderer and decrease its visibility.
        if(Vector3.Distance(startPosition, transform.position) > flyDistance - 1.5f)
            trailRenderer.time -= 2 * Time.deltaTime;

        if(Vector3.Distance(startPosition, transform.position) > flyDistance && !bulletDisabled)
        {
            cd.enabled = false;
            meshRenderer.enabled = false;
            bulletDisabled = true;
        }

        //this will return the bullet to the objectPool once its disappeared.
        if(trailRenderer.time < 0)
        {
            //this will let the bullet re enter the queue instead of destroying it.
            ObjectPool.instance.ReturnBullet(gameObject);
        }
       
    }

    //creating a collider for the bullet.
    private void OnCollisionEnter(Collision collision)
    {
        CreateImpactFx(collision);


        //this will stick to objects that it collides with.
        //rb.constraints = RigidbodyConstraints.FreezeAll;

        //this will let the bullet re enter the queue instead of destroying it.
        ObjectPool.instance.ReturnBullet(gameObject);
    }

    private void CreateImpactFx(Collision collision)
    {
        if (collision.contacts.Length > 0)
        {
            //this is the first contact with an object that the bullet hits.
            ContactPoint contact = collision.contacts[0];

            //this will start the visual effect of the impact effect after bullet hits object.
            GameObject newImpactFX = Instantiate(bulletImpactFX, contact.point, Quaternion.LookRotation(contact.normal));

            //Destroy the VFX after it hits an object so it doesn't loop.
            Destroy(newImpactFX, 1f);
        }
    }
}
