using UnityEngine;

public class Bullet : MonoBehaviour
{
    //This will be for the VFX of the bullet impact.
    [SerializeField] private GameObject bulletImpactFX;

    private Rigidbody rb;
    private BoxCollider cd;

    //we are going to use the trail to make the bullet dissapear better after it reaches its gunDistance.
    private TrailRenderer trailRenderer;
    private MeshRenderer meshRenderer;


    //this will be used to see how far the bullets are flying.
    //we are going to use this along with PlayerAim's laser for how far the gun can shoot based of its weapon type.
    private Vector3 startPosition;
    private float flyDistance;
    private bool bulletDisabled;

    private void Awake()
    {
        cd = GetComponent<BoxCollider>();
        rb = GetComponent<Rigidbody>();
        meshRenderer = GetComponent<MeshRenderer>();
        trailRenderer = GetComponent<TrailRenderer>();
    }
    public void BulletSetup(float flyDistance)
    {
        bulletDisabled = false;
        cd.enabled = true;
        meshRenderer.enabled = true;

        trailRenderer.time = .25f;
        startPosition = transform.position;
        this.flyDistance = flyDistance + 0.6f;
    }

    private void Update()
    {
        FadeTrailIfNeeded();
        DiableBulletIfNeeded();
        ReturnToPoolIfNeeded();
    }

    private void ReturnToPoolIfNeeded()
    {
        //this will return the bullet to the objectPool once its disappeared.
        if (trailRenderer.time < 0)
        {
            ReturnBulletToPool();
        }
    }

    private void ReturnBulletToPool()
    {
        //this will let the bullet re enter the queue instead of destroying it.
        ObjectPool.instance.ReturnObject(gameObject);
    }

    private void DiableBulletIfNeeded()
    {
        if (Vector3.Distance(startPosition, transform.position) > flyDistance && !bulletDisabled)
        {
            cd.enabled = false;
            meshRenderer.enabled = false;
            bulletDisabled = true;
        }
    }

    private void FadeTrailIfNeeded()
    {
        //before the bullet reaches its max flyDistance we are going to get its trailRenderer and decrease its visibility.
        if (Vector3.Distance(startPosition, transform.position) > flyDistance - 1.5f)
            trailRenderer.time -= 2 * Time.deltaTime;
    }

    //creating a collider for the bullet.
    private void OnCollisionEnter(Collision collision)
    {
        Enemy enemy = collision.gameObject.GetComponentInParent<Enemy>();
        //this will play the gethit function when enemy gets hit with the bullet.
        if(enemy != null)
        {
            enemy.GetHit();
        }

        CreateImpactFx(collision);

        //this will stick to objects that it collides with.
        //rb.constraints = RigidbodyConstraints.FreezeAll;

        ReturnBulletToPool();
    }

    private void CreateImpactFx(Collision collision)
    {
        if (collision.contacts.Length > 0)
        {
            //this is the first contact with an object that the bullet hits.
            ContactPoint contact = collision.contacts[0];

            //this will start the visual effect of the impact effect after bullet hits object.
            GameObject newImpactFX = ObjectPool.instance.GetObject(bulletImpactFX);
            newImpactFX.transform.position = contact.point;

            ObjectPool.instance.ReturnObject(newImpactFX, 1);
        }
    }
}
