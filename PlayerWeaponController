using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;

public class PlayerWeaponController : MonoBehaviour
{
    //this is the default speed of the bullet for the mass of 1.
    private const float REFERENCE_BULLET_SPEED = 20;

    private Player player;

    [SerializeField] private Weapon_Data defaultWeaponData;
    [SerializeField] private Weapon currentWeapon;

    //this will be used to help fix the laser aim direction.
    private bool weaponReady;

    //this will be used to switch the shooting type of the weapon.
    private bool isShooting;

    [Header("Bullet Info")]
    [SerializeField] private float bulletImpactForce = 100;
    //this is for creating the bullet.
    [SerializeField] private GameObject bulletPrefab;
    [SerializeField] private float bulletSpeed;

    [SerializeField] private Transform weaponHolder;

    [Header("Inventory")]
    //This is for creating weapon slots.
    [SerializeField] private List<Weapon> weaponSlots;
    //this will make sure that the player only picks up 2 weapons that can be equiped.
    [SerializeField] private int maxSlots = 2;

    [SerializeField] private GameObject weaponPickupPrefab;

    //We will be calling functions here for shooting the weapons.
    private void Start()
    {
        player = GetComponent<Player>();

        AssignInputEvents();

        Invoke("EquipStartingWeapon", .1f);

        //this is for the ammo of the weapon that is being held.
        //currentWeapon.bulletsInMagazine = currentWeapon.totalReserveAmmo;
    }

    private void Update()
    {
        if (isShooting)
            Shoot();
    }

    private IEnumerator BurstFire()
    {
        for (int i = 1; i <= currentWeapon.bulletsPerShot; i++)
        {
            FireSingleBullet();

            yield return new WaitForSeconds(currentWeapon.burstFireDelay);

            //this will make sure that the weapon shoots all its bullets for the burst fire before shooting again per click. 
            if (i >= currentWeapon.bulletsPerShot)
                SetWeaponReady(true);
        }
    }

    //adds a starting weapon to the character if he doesn't have one.
    private void EquipStartingWeapon()
    {
        //when 0 index is called it will fill the slot with a weapon and constructor will be called automatically.
        weaponSlots[0] = new Weapon(defaultWeaponData);

        EquipWeapon(0);
    }

    private void AssignInputEvents()
    {
        //calling the Fire action here.
        PlayerControls controls = player.controls;
        controls.Character.Fire.performed += context => isShooting = true;
        controls.Character.Fire.canceled += context => isShooting = false;

        //calling the equipslot here.
        controls.Character.EquipSlot1.performed += context => EquipWeapon(0);
        controls.Character.EquipSlot2.performed += context => EquipWeapon(1);
        controls.Character.EquipSlot3.performed += context => EquipWeapon(2);
        controls.Character.EquipSlot4.performed += context => EquipWeapon(3);
        controls.Character.EquipSlot5.performed += context => EquipWeapon(4);

        //calling the drop weapon here.
        controls.Character.DropCurrentWeapon.performed += context => DropWeapon();

        //calling the reload here.
        controls.Character.Reload.performed += context => {
            if (currentWeapon.canReload() && WeaponReady())
            {
                Reload();
            }
        };
        //this will toggle the burst mode of the weapon when pressing T.
        controls.Character.ToggleWeaponMode.performed += context => currentWeapon.ToggleBurst();

    }

    private void EquipWeapon(int i)
    {
        //this will check if there is a weapon in the equip slot you are trying to access.
        if (i >= weaponSlots.Count)
            return;


        //this will set the weapon being ready to false so the laser doesn't appear when switching weapons.
        SetWeaponReady(false);

        currentWeapon = weaponSlots[i];

        //this stiches off the weapon models when equipping a new weapon.
        player.weaponVisuals.PlayWeaponEquipAnimation();

        //this will change the camera distance for the character depending on the weapon equipped.
        CameraManager.instance.ChangeCameraDistance(currentWeapon.cameraDistance);
    }

    public void PickupWeapon(Weapon newWeapon)
    { 
       
        if(WeaponInSlots(newWeapon.weaponType) != null)
        {
            WeaponInSlots(newWeapon.weaponType).totalReserveAmmo += newWeapon.bulletsInMagazine;
            return;
        }

        if(weaponSlots.Count >= maxSlots && newWeapon.weaponType != currentWeapon.weaponType)
        {
            int weaponIndex = weaponSlots.IndexOf(currentWeapon);

            player.weaponVisuals.SwitchOffWeaponModels();
            weaponSlots[weaponIndex] = newWeapon;

            CreateWeaponOnTheGround();
            EquipWeapon(weaponIndex);

            return;
        }

        weaponSlots.Add(newWeapon);
        player.weaponVisuals.SwitchOnBackupWeaponModel();
    }

    private void DropWeapon()
    {
        if (HasOnlyOneWeapon())
            return;

        CreateWeaponOnTheGround();

        weaponSlots.Remove(currentWeapon);

        //this will remove the weapon model if dropping a gun.
        EquipWeapon(0);
    }

    private void CreateWeaponOnTheGround()
    {
        GameObject droppedWeapon = ObjectPool.instance.GetObject(weaponPickupPrefab);

        droppedWeapon.GetComponent<Pickup_Weapon>()?.SetupPickupWeapon(currentWeapon, transform);
    }

    //the bottom two functions will make sure that the laser only appears when the weapon is ready.
    public void SetWeaponReady(bool ready) => weaponReady = ready;
    public bool WeaponReady() => weaponReady;


    //This is the function that will control the shooting animation.
    private void Shoot()
    {
        //cannot shoot until weapon is ready.
        if (WeaponReady() == false)
            return;

        //check for current weapon.
        if (currentWeapon.CanShoot() == false)
            return;

        //setting up the player animation for shooting weapons.
        player.weaponVisuals.PlayFireAnimation();

        if (currentWeapon.shootType == ShootType.single)
            isShooting = false;

        if(currentWeapon.BurstActivated()== true)
        {
        StartCoroutine(BurstFire());
            return;
        }

        FireSingleBullet();

        TriggerEnemyDodge();

    }

    private void FireSingleBullet()
    {
        //this will make the bullet count go down in the magazine when firing.
        currentWeapon.bulletsInMagazine--;

        //gets newbullet from the ObjectPool.
        GameObject newBullet = ObjectPool.instance.GetObject(bulletPrefab);
        //Instantiate(bulletPrefab, gunPoint.position,Quaternion.LookRotation(gunPoint.forward));
        newBullet.transform.position = GunPoint().position;
        newBullet.transform.rotation = Quaternion.LookRotation(GunPoint().forward);


        //this will assign the mass of rigidbody to the reference of the movement speed.
        Rigidbody rbNewBullet = newBullet.GetComponent<Rigidbody>();

        //this will be getting the component of the bullet that we just setup the flydistance for.
        //we are calling the method of BulletSetup() and passing the gunDistance value.
        Bullet bulletScript = newBullet.GetComponent<Bullet>();
        bulletScript.BulletSetup(currentWeapon.gunDistance, bulletImpactForce);

        //this will apply bullet spread for the weapons if needed.
        Vector3 bulletsDirection = currentWeapon.ApplySpread(BulletDirection());

        //this will change the mass of the bullet to be divided by the speed of the bullet.
        rbNewBullet.mass = REFERENCE_BULLET_SPEED / bulletSpeed;
        rbNewBullet.velocity = bulletsDirection * bulletSpeed;
    }

    private void Reload()
    {
        SetWeaponReady(false);
        player.weaponVisuals.PlayReloadAnimation();
    }

    public Vector3 BulletDirection()
    {
        Transform aim = player.aim.Aim();

        Vector3 direction = (aim.position - GunPoint().position).normalized;

        //check if player can aim precisly.
        if (player.aim.CanAimPrecisly() == false && player.aim.Target() == null)
            direction.y = 0;

        return direction;
    }

    public bool HasOnlyOneWeapon() => weaponSlots.Count <= 1;
    public Weapon WeaponInSlots(WeaponType weaponType)
    {
        foreach (Weapon weapon in weaponSlots)
        {
            if (weapon.weaponType == weaponType)
                return weapon;
        }
        return null;
    }

    //this will return currentweapon.
    public Weapon CurrentWeapon() => currentWeapon;

    //Setting up the aim laser.
    public Transform GunPoint() => player.weaponVisuals.CurrentWeaponModel().gunPoint;

    private void TriggerEnemyDodge()
    {
        Vector3 rayOrigin = GunPoint().position;
        Vector3 rayDirection = BulletDirection();

        if(Physics.Raycast(rayOrigin, rayDirection, out RaycastHit hit, Mathf.Infinity))
        {
            Enemy_Melee enemy_Melee = hit.collider.gameObject.GetComponent<Enemy_Melee>();

            if(enemy_Melee != null)
            {
                enemy_Melee.ActivateDodgeRoll();
            }
        }
    }
}


