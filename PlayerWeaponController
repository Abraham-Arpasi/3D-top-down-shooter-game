using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;

public class PlayerWeaponController : MonoBehaviour
{
    //this is the default speed of the bullet for the mass of 1.
    private const float REFERENCE_BULLET_SPEED = 20;

    private Player player;

    [SerializeField] private Weapon currentWeapon;

    [Header("Bullet Info")]
    //this is for creating the bullet.
    [SerializeField] private GameObject bulletPrefab;
    [SerializeField] private float bulletSpeed;
    [SerializeField] private Transform gunPoint;

    [SerializeField] private Transform weaponHolder;

    [Header("Inventory")]
    //This is for creating weapon slots.
    [SerializeField] private List<Weapon> weaponSlots;
    //this will make sure that the player only picks up 2 weapons that can be equiped.
    [SerializeField] private int maxSlots = 2;

    //We will be calling functions here for shooting the weapons.
    private void Start()
    {
        player = GetComponent<Player>();

        AssignInputEvents();

        Invoke("EquipStartingWeapo", .1f);

        //this is for the ammo of the weapon that is being held.
        //currentWeapon.bulletsInMagazine = currentWeapon.totalReserveAmmo;
    }

    //adds a starting weapon to the character if he doesn't have one.
    private void EquipStartingWeapon() => EquipWeapon(0);

    private void AssignInputEvents()
    {
        //calling the Fire action here.
        PlayerControls controls = player.controls;
        controls.Character.Fire.performed += context => Shoot();

        //calling the equipslot here.
        controls.Character.EquipSlot1.performed += context => EquipWeapon(0);
        controls.Character.EquipSlot2.performed += context => EquipWeapon(1);

        //calling the drop weapon here.
        controls.Character.DropCurrentWeapon.performed += context => DropWeapon();

        //calling the reload here.
        controls.Character.Reload.performed += context => {
            if (currentWeapon != null && currentWeapon.canReload())
            {
                player.weaponVisuals.PlayReloadAnimation();
            }
        };

    }

    private void EquipWeapon(int i)
    {
        currentWeapon = weaponSlots[i];

        //this stiches off the weapon models when equipping a new weapon.
        player.weaponVisuals.PlayWeaponEquipAnimation();
    }

    public void PickupWeapon(Weapon newWeapon)
    { 
        if(weaponSlots.Count >= maxSlots)
        {
            return;
        }

        weaponSlots.Add(newWeapon);
        player.weaponVisuals.SwitchOnBackupWeaponModel();
    }

    private void DropWeapon()
    {
        if (HasOnlyOneWeapon())
            return;

        weaponSlots.Remove(currentWeapon);

        //this will remove the weapon model if dropping a gun.
        EquipWeapon(0);
    }


    //This is the function that will control the shooting animation.
    private void Shoot()
    {
        //check for current weapon.
        if (currentWeapon.CanShoot() == false)
            return;


        //create local variable for bullet.
        GameObject newBullet = Instantiate(bulletPrefab, gunPoint.position,Quaternion.LookRotation(gunPoint.forward));

        //this will assign the mass of rigidbody to the reference of the movement speed.
        Rigidbody rbNewBullet = newBullet.GetComponent<Rigidbody>();

        //this will change the mass of the bullet to be divided by the speed of the bullet.
        rbNewBullet.mass = REFERENCE_BULLET_SPEED / bulletSpeed;
        rbNewBullet.velocity = BulletDirection() * bulletSpeed;

        //this is going to destroy the bullet after a duration.
        Destroy(newBullet, 10);


        //setting up the player animation for shooting weapons.
        GetComponentInChildren<Animator>().SetTrigger("Fire");
    }

    public Vector3 BulletDirection()
    {
        Transform aim = player.aim.Aim();

        Vector3 direction = (aim.position - gunPoint.position).normalized;

        //check if player can aim precisly.
        if (player.aim.CanAimPrecisly() == false && player.aim.Target() == null)
            direction.y = 0;

        //this updates the weapon rotation while aiming.
       // weaponHolder.LookAt(aim);
       // gunPoint.LookAt(aim); TODO: find a better place for this.

        return direction;
    }

    public bool HasOnlyOneWeapon() => weaponSlots.Count <= 1;

    //this will return currentweapon.
    public Weapon CurrentWeapon() => currentWeapon;

    //this will find which weapon is not current weapon.
    public Weapon BackupWeapon()
    {
        foreach (Weapon weapon in weaponSlots)
        {
            if (weapon != currentWeapon)
                return weapon;
        }

        return null;
    }

    //Setting up the aim laser.
    public Transform GunPoint() => gunPoint;
}
