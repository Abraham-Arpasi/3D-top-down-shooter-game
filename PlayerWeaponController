using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;

public class PlayerWeaponController : MonoBehaviour
{
    //this is the default speed of the bullet for the mass of 1.
    private const float REFERENCE_BULLET_SPEED = 20;

    private Player player;

    [SerializeField] private Weapon currentWeapon;

    [Header("Bullet Info")]
    //this is for creating the bullet.
    [SerializeField] private GameObject bulletPrefab;
    [SerializeField] private float bulletSpeed;
    [SerializeField] private Transform gunPoint;

    [SerializeField] private Transform weaponHolder;

    //We will be calling functions here for shooting the weapons.
    private void Start()
    {
        player = GetComponent<Player>();

        //calling the Fire action here
        player.controls.Character.Fire.performed += context => Shoot();

        //this is for the ammo of the weapon that is being held.
        currentWeapon.ammo = currentWeapon.maxAmmo;
    }


    //This is the function that will control the shooting animation.
    private void Shoot()
    {
        //this will make the gun stop shooting if ran out of ammo.
        if(currentWeapon.ammo <= 0)
        {
            return;
        }

        //this will decrease the amount of bullet when shooting by 1.
        currentWeapon.ammo--;

        //create local variable for bullet.
        GameObject newBullet = Instantiate(bulletPrefab, gunPoint.position,Quaternion.LookRotation(gunPoint.forward));

        //this will assign the mass of rigidbody to the reference of the movement speed.
        Rigidbody rbNewBullet = newBullet.GetComponent<Rigidbody>();

        //this will change the mass of the bullet to be divided by the speed of the bullet.
        rbNewBullet.mass = REFERENCE_BULLET_SPEED / bulletSpeed;
        rbNewBullet.velocity = BulletDirection() * bulletSpeed;

        //this is going to destroy the bullet after a duration.
        Destroy(newBullet, 10);


        //setting up the player animation for shooting weapons.
        GetComponentInChildren<Animator>().SetTrigger("Fire");
    }

    public Vector3 BulletDirection()
    {
        Transform aim = player.aim.Aim();

        Vector3 direction = (aim.position - gunPoint.position).normalized;

        //check if player can aim precisly.
        if (player.aim.CanAimPrecisly() == false && player.aim.Target() == null)
            direction.y = 0;

        //this updates the weapon rotation while aiming.
       // weaponHolder.LookAt(aim);
       // gunPoint.LookAt(aim); TODO: find a better place for this.

        return direction;
    }

    //Setting up the aim laser.
    public Transform GunPoint() => gunPoint;
}


