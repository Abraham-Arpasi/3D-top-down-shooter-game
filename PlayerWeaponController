using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.Animations.Rigging;

public class PlayerWeaponVisuals : MonoBehaviour
{
    //setting up player.
    private Player player;

    //set up so we can call animator.
    private Animator anim;

    //this will prevent the weapon from being reloaded when grabbing the weapon.
    private bool isGrabbingWeapon;

    //creating the weapon model to appear in game.
    [SerializeField] private WeaponModel[] weaponModels;
    //this is the weapon model that appears on the characters back.
    [SerializeField] private BackupWeaponModel[] backupWeaponModels;

    [Header("Rig info")]
    //This is what gives weight to certain animations, we need this turned on or off for the reload animation.
    private Rig rig;
    [SerializeField] private float rigWeightIncreaseRate;
    private bool shouldIncrease_RigWeight;

    [Header("Left Hand IK")]
    [SerializeField] private Transform leftHandIK_Target;
    //This will help keep the left hand undercontrol when switching weapons.
    [SerializeField] private TwoBoneIKConstraint leftHandIK;
    [SerializeField] private float leftHandIKWeightIncreaseRate;
    private bool shouldIncrease_LeftHandIKWeight;


    private void Start()
    {
        anim = GetComponentInChildren<Animator>();
        rig = GetComponentInChildren<Rig>();
        player = GetComponent<Player>();

        //this one is GetComponent(s) with an s since there are more than one.
        weaponModels = GetComponentsInChildren<WeaponModel>(true);
        backupWeaponModels = GetComponentsInChildren<BackupWeaponModel>(true);

    }

    private void Update()
    {
        UpdateRigWeight();
        UpdateLeftHandIKWeight();
    }


    public WeaponModel CurrentWeaponModel()
    {
        //this creates local variable which is null.
        WeaponModel weaponModel = null;

        //checks if the weapon equipped matches with the weapon model.
        //creates local variable of a weapontype and equals to the current weapons weapontype.
        WeaponType weaponType = player.weapon.CurrentWeapon().weaponType;

        for (int i = 0; i < weaponModels.Length; i++)
        {
            if (weaponModels[i].WeaponType == weaponType)
                weaponModel = weaponModels[i];
        }

        return weaponModel;
    }

    public void PlayReloadAnimation()
    {
        if (isGrabbingWeapon)
            return;
        
        anim.SetTrigger("Reload");
        ReduceRigWeight();
    }

    private void UpdateLeftHandIKWeight()
    {
        //just like with reloading, this will change the rig weight for the animation of grab.
        if (shouldIncrease_LeftHandIKWeight)
        {
            leftHandIK.weight += leftHandIKWeightIncreaseRate * Time.deltaTime;

            if (leftHandIK.weight >= 1)
                shouldIncrease_LeftHandIKWeight = false;
        }
    }

    private void UpdateRigWeight()
    {
        //This will change the rig weight for the animation of reloading.
        if (shouldIncrease_RigWeight)
        {
            rig.weight += rigWeightIncreaseRate * Time.deltaTime;

            if (rig.weight >= 1)
            {
                shouldIncrease_RigWeight = false;
            }
        }
    }

    private void ReduceRigWeight()
    {
        rig.weight = 0.15f;
    }

    public void PlayWeaponEquipAnimation()
    {
        GrabType grabType = CurrentWeaponModel().grabType;

        leftHandIK.weight = 0;
        //the pauseRig function is used to adjust the left hand like it did with reload.
        ReduceRigWeight();
        //setting up different types of weapon grabs like, side grab and back grab.
        anim.SetFloat("WeaponGrabType", ((float)grabType));
        anim.SetTrigger("WeaponGrab");
        SetBusyGrabbingWeaponTo(true);
    }

    public void SetBusyGrabbingWeaponTo(bool busy)
    {
        //this will prevent the character reloading when its grabbing the weapon.
        isGrabbingWeapon = busy;
        anim.SetBool("BusyGrabbingWeapon", isGrabbingWeapon);
    }


    //This will make the rig weight change when reloading animation is finished.
    public void MaximizeRigWeight() => shouldIncrease_RigWeight = true;

    // this will make the rif weight change when grabbing animation is finished.
    public void MaximizeLeftHandWeight() => shouldIncrease_LeftHandIKWeight = true;

    //this will switch on the weapon model that the character is holding.
    public void SwitchOnCurrentWeaponModel()
    {
        //this will switch animation layer
        int animationIndex = ((int)CurrentWeaponModel().holdType);

        SwitchOffWeaponModels();

        SwitchOffBackupWeaponModels();

        //switches on the weapon if character has more than one weapon
        if(player.weapon.HasOnlyOneWeapon() == false)
            SwitchOnBackupWeaponModel();

        SwitchAnimationLayer(animationIndex);
        
        //this will switch on the model you want to have.
        CurrentWeaponModel().gameObject.SetActive(true);

        AttachLeftHand();
    }

    //this will switch all the guns we aren't using off.
    public void SwitchOffWeaponModels()
    {
        //this will switch off all of the guns from the characters hands.
        for (int i = 0; i < weaponModels.Length; i++)
        {
            weaponModels[i].gameObject.SetActive(false);
        }
    }

    //this will switch off the back weapon.
    private void SwitchOffBackupWeaponModels()
    {
        foreach(BackupWeaponModel backupModel in backupWeaponModels) 
        { 
            backupModel.gameObject.SetActive(false);
        }
    }
    //this will switch on the back weapon.
    private void SwitchOnBackupWeaponModel()
    {
        WeaponType weaponType = player.weapon.BackupWeapon().weaponType;

        foreach(BackupWeaponModel backupModel in backupWeaponModels)
        {
            if(backupModel.weaponType == weaponType)
                backupModel.gameObject.SetActive(true);
        }
    }

    //This function here is what will be used when switching the left hands position when switching weapons.
    private void AttachLeftHand()
    {
        Transform targetTransform = CurrentWeaponModel().holdPoint;
        
        leftHandIK_Target.localPosition = targetTransform.localPosition; 
        leftHandIK_Target.localRotation = targetTransform.localRotation;
    }

    //This will switch the animation layer between common weapons, shotguns, and snipers.
    //We use the parameter so we can let it know which animation layer we want to switch on.
    private void SwitchAnimationLayer(int layerIndex)
    {
        for (int i = 1; i < anim.layerCount; i++)
        {
            anim.SetLayerWeight(i, 0);
        }

        anim.SetLayerWeight(layerIndex, 1);
    }


}
