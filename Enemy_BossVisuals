using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using UnityEngine;

public class Enemy_BossVisuals : MonoBehaviour
{
    private Enemy_Boss enemy;

    [SerializeField] private ParticleSystem landingZoneFx;

    [Header("Batteries")]
    [SerializeField] private GameObject[] batteries;
    [SerializeField] private float initializeBatteryScaleY = 0.2f;

    private float dischargeSpeed;
    private float rechargeSpeed;
    private bool isRecharging;

    private void Awake()
    {
        enemy = GetComponent<Enemy_Boss>();

        landingZoneFx.transform.parent = null;
        landingZoneFx.Stop();

        ResetBatteries();
    }

    private void Update()
    {
        UpdateBatteriesScale();
    }

    public void PlaceLandingZone(Vector3 target)
    {
        landingZoneFx.transform.position = target;
        landingZoneFx.Clear();

        var mainModule = landingZoneFx.main;
        mainModule.duration = enemy.travelTimeToTarget;

        landingZoneFx.Play();
    }

    private void UpdateBatteriesScale()
    {
        if (batteries.Length < 0)
            return;

        foreach (GameObject battery in batteries)
        {
            if (battery.activeSelf)
            {
                float scaleChange = (isRecharging ? rechargeSpeed : -dischargeSpeed) * Time.deltaTime;
                float newScaleY = Mathf.Clamp(battery.transform.localScale.y + scaleChange, 0, initializeBatteryScaleY);

                battery.transform.localScale = new Vector3(0.15f, newScaleY, 0.15f);

                if (battery.transform.localScale.y <= 0)
                    battery.SetActive(false);
            }

        }
    }

    public void ResetBatteries()
    {
        isRecharging = true;

        rechargeSpeed = initializeBatteryScaleY / enemy.abilityCooldown;
        dischargeSpeed = initializeBatteryScaleY / (enemy.flamethrowDuration * 0.75f);

        foreach(GameObject battery in batteries)
        {
            battery.SetActive(true);
        }
    }

    public void Dischargebatteries() => isRecharging = false;
}
