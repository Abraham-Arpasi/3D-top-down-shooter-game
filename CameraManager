using Cinemachine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraManager : MonoBehaviour
{
    public static CameraManager instance;

    private CinemachineVirtualCamera virtualCamera;
    private CinemachineFramingTransposer transposer;

    [Header("Camera info")]
    private float targetCameraDistance;
    [SerializeField]private float distanceCameraRate;
    [SerializeField] private bool canChangeCameraDistance;


    private void Awake()
    {
        if (instance == null)
            instance = this;
        else
        {
            Debug.LogWarning("You had more than one Camera Manager");
            Destroy(gameObject);
        }

        virtualCamera = GetComponentInChildren<CinemachineVirtualCamera>();
        transposer = virtualCamera.GetCinemachineComponent<CinemachineFramingTransposer>();

    }

    private void Update()
    {
        UpdateCameraDistance();
    }

    private void UpdateCameraDistance()
    {
        //we can swtich on/off camera distance change during testing for the weapon.
        if (canChangeCameraDistance == false)
            return;

        float currentDistance = transposer.m_CameraDistance;

        //this will make is so that the cameraDistance can be off by 0.1 so that the camera isn't slowing down for a long time.
        if (Mathf.Abs(targetCameraDistance - currentDistance) < 0.1f)
            return;

            //using Lerp will make the camera change from switching weapons more smooth.
            transposer.m_CameraDistance = Mathf.Lerp(currentDistance, targetCameraDistance, distanceCameraRate * Time.deltaTime);  
    }

    public void ChangeCameraDistance(float distance) => targetCameraDistance = distance;

    public void ChangeCameraTarget(Transform target, float cameraDistance = 1)
    {
        virtualCamera.Follow = target;
        ChangeCameraDistance(cameraDistance);
    }
}
