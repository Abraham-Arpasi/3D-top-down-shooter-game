using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using UnityEngine;

public class Cover : MonoBehaviour
{
    private Transform playerTransform;

    [Header("Cover points")]
    [SerializeField] private GameObject coverPointPrefab;
    [SerializeField] private List<CoverPoint> coverPoints = new List<CoverPoint>();
    [SerializeField] private float xOffset = 1.25f;
    [SerializeField] private float yOffset = 0.2f;
    [SerializeField] private float zOffset = 1;

    private void Start()
    {
        GenerateCoverPoints();
        playerTransform = FindObjectOfType<Player>().transform;
    }

    private void GenerateCoverPoints()
    {
        Vector3[] localCoverPoints =
        {
            new Vector3 (0, yOffset, zOffset),
            new Vector3 (0, yOffset, -zOffset),
            new Vector3 (xOffset, yOffset, 0),
            new Vector3 (-xOffset, yOffset, 0)
        };

        foreach(Vector3 localPoint in localCoverPoints)
        {
            Vector3 worldPoint = transform.TransformPoint(localPoint);
            CoverPoint coverPoint = 
                Instantiate(coverPointPrefab, worldPoint, Quaternion.identity, transform).GetComponent<CoverPoint>();
            coverPoints.Add(coverPoint);
        }
    }
    // this will check if a cover point will be valid to run to for the enemy.
    public List<CoverPoint> GetValidCoverPoints(Transform enemy)
    {
        List<CoverPoint> validCoverPoints = new List<CoverPoint>();

        foreach(CoverPoint coverPoint in coverPoints)
        {
            if(IsValidCoverPoint(coverPoint, enemy))
                validCoverPoints.Add(coverPoint);
        }
        return validCoverPoints;
    }
    //this will return invalid if coverpoint is occupied by another enemy or return valid if no enemy is occupieing the cover point.
    private bool IsValidCoverPoint(CoverPoint coverPoint, Transform enemy)
    {
        //return false is cover is occupied.
        if (coverPoint.occupied)
            return false;

        //return false if enemy cant move to farthest cover point.
        if (IsFarthestFromPlayer(coverPoint) == false)
            return false;

        //return false if the player is closer to the cover.
        if(IsCoverCloseToPlayer(coverPoint))
            return false;

        //return false if cover is behind the player.
        if (IsCoverBehindPlayer(coverPoint, enemy))
            return false;

        //returns false if player gets close to enemy in cover.
        if (IsCoverCloseToLastCover(coverPoint, enemy))
            return false;

        return true;
    }

    private bool IsFarthestFromPlayer(CoverPoint coverPoint)
    {
        CoverPoint farthestPoint = null;
        float farthestDistance = 0;

        foreach(CoverPoint point in coverPoints)
        {
            float distance = Vector3.Distance(point.transform.position, playerTransform.transform.position);
            if(distance > farthestDistance)
            {
                farthestDistance = distance;
                farthestPoint = point;
            }
        }
        return farthestPoint == coverPoint;
    }

    //this will check if the cover is behind the player.
    private bool IsCoverBehindPlayer(CoverPoint coverPoint, Transform enemy)
    {
        float distanceToPlayer = Vector3.Distance(coverPoint.transform.position, playerTransform.position);
        float distanceToEnemy = Vector3.Distance(coverPoint.transform.position, enemy.position);
        //this will return if the player is closer to the enemy.
        return distanceToPlayer < distanceToEnemy;
    }
    //checks if the player is farther away from the cover point than the enemy is.
    private bool IsCoverCloseToPlayer(CoverPoint coverPoint)
    {
        return Vector3.Distance(coverPoint.transform.position, playerTransform.transform.position) < 2;
    }

    private bool IsCoverCloseToLastCover(CoverPoint coverPoint, Transform enemy)
    {
        CoverPoint lastCover = enemy.GetComponent<Enemy_Range>().currentCover;
        return lastCover != null && Vector3.Distance(coverPoint.transform.position, lastCover.transform.position) < 3;
    }
}
