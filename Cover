using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Cover : MonoBehaviour
{
    [Header("Cover points")]
    [SerializeField] private GameObject coverPointPrefab;
    [SerializeField] private List<CoverPoint> coverPoints = new List<CoverPoint>();
    [SerializeField] private float xOffset = 1.25f;
    [SerializeField] private float yOffset = 0.2f;
    [SerializeField] private float zOffset = 1;

    private void Start()
    {
        GenerateCoverPoints();
    }

    private void GenerateCoverPoints()
    {
        Vector3[] localCoverPoints =
        {
            new Vector3 (0, yOffset, zOffset),
            new Vector3 (0, yOffset, -zOffset),
            new Vector3 (xOffset, yOffset, 0),
            new Vector3 (-xOffset, yOffset, 0)
        };

        foreach(Vector3 localPoint in localCoverPoints)
        {
            Vector3 worldPoint = transform.TransformPoint(localPoint);
            CoverPoint coverPoint = 
                Instantiate(coverPointPrefab, worldPoint, Quaternion.identity, transform).GetComponent<CoverPoint>();
            coverPoints.Add(coverPoint);
        }
    }
    // this will check if a cover point will be valid to run to for the enemy.
    public List<CoverPoint> GetValidCoverPoints()
    {
        List<CoverPoint> validCoverPoints = new List<CoverPoint>();

        foreach(CoverPoint coverPoint in coverPoints)
        {
            validCoverPoints.Add(coverPoint);
        }
        return validCoverPoints;
    }
    //this will return invalid if coverpoint is occupied by another enemy or return valid if no enemy is occupieing the cover point.
    private bool IsValidCOverPoint(CoverPoint coverPoint)
    {
        if (coverPoint.occupied)
            return false;

        return true;
    }
}
