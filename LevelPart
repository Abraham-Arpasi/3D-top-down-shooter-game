using System.Collections;
using System.Collections.Generic;
using System.Xml.Schema;
using UnityEngine;

public class LevelPart : MonoBehaviour
{
    public void SnapAndAlignPartTo(SnapPoint targetSnapPoint)
    {
        SnapPoint entrancePoint = GetEntrancePoint();

        SnapTo(entrancePoint, targetSnapPoint);
        AlignTo(entrancePoint, targetSnapPoint);
    }

    private void AlignTo(SnapPoint ownSnapPoint, SnapPoint targetSnapPoint)
    {
        //Calculate the rotation offset between the level parts current rotation and its own snap points rotation.
        //this helps in the fine tuning the alignment later.
        var rotationOffsetr = ownSnapPoint.transform.rotation.eulerAngles.y - transform.rotation.eulerAngles.y;

        //Set the level parts rotation to mathch the target snap points rotation.
        //this is the inital stop to align the orientations of the two parts.
        transform.rotation = targetSnapPoint.transform.rotation;

        //Rotate the level part by 100 degerees around the y axis.
        //this is necessary because the snap points are facing opposite directions, and this rotation aligns them to face each other correctly.
        transform.Rotate(0, 180, 0);

        //apply the previously calculated offset.
        //this step fine tunes the alignment by adjusting the level parts rotation to account for any inital difference in orientation between the level parts own snap point and the main body of the part.
        transform.Rotate(0, -rotationOffsetr, 0);
    }

    private void SnapTo(SnapPoint ownSnapPoint, SnapPoint targetSnapPoint)
    {
        //Calculate the offset between the level part's current position and its own snap points position.
        //this offset represents the distance and direction from the level part's pivot to its snap point.
        var offset = transform.position - ownSnapPoint.transform.position;

//determine the new position for the level part. its calculated by adding the previously co,puted offset to the targets snap points position.
//this effectively moves the level part so that its snap point aligns with the target snap points position.
        var newPosition = targetSnapPoint.transform.position + offset;

        //update the level parts position to the newly calculated position by using snap points.
        transform.position = newPosition;
    }

    public SnapPoint GetEntrancePoint() => GetSnapPointType(SnapPointType.Enter);
    public SnapPoint GetExitPoint() => GetSnapPointType(SnapPointType.Exit);

   private SnapPoint GetSnapPointType(SnapPointType pointType)
    {
        SnapPoint[] snapPoints = GetComponentsInChildren<SnapPoint>();
        List<SnapPoint> filteredSnapPoints = new List<SnapPoint>();

        //Collect all the snap points of the specified type.
        foreach (SnapPoint snapPoint in snapPoints)
        {
            if(snapPoint.pointType == pointType)
            {
                filteredSnapPoints.Add(snapPoint);
            }
        }

        //if there are matching snap points, choose one at random.
        if(filteredSnapPoints.Count > 0)
        {
            int randomIndex = Random.Range(0, filteredSnapPoints.Count);
            return filteredSnapPoints[randomIndex];
        }
        //return null if no matching snap points are found.
        return null;
    }
}
