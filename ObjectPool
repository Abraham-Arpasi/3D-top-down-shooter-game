using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ObjectPool : MonoBehaviour
{
    public static ObjectPool instance;

    [SerializeField] private GameObject itemPrefab;
    [SerializeField] private GameObject effectPrefab;
    //this will create lots of bullets in the beginnging of the game.
    [SerializeField] private GameObject bulletPrefab;
    [SerializeField] private int poolSize = 10;

    //queue is when an object enters a queue first it is also the first to get out.
    private Queue<GameObject> bulletPool;
    private Queue<GameObject> effectPool;
    private Queue<GameObject> itemPool;

    private Dictionary<string, Queue<GameObject>> poolDictionary = new Dictionary<string, Queue<GameObject>>();

    //this will make sure we only have one instance of object pool in the game. 
    private void Awake()
    {
        if(instance == null)
            instance = this;
        else
            Destroy(gameObject);
    }

    private void Start()
    {
        bulletPool = new Queue<GameObject>();

        CreateInitialPool();

        poolDictionary["Bullet"] = bulletPool;
    }

    //this will take the bullet out the the pool instead of creating a new bullet.
    public GameObject GetObject(string poolName)
    {
        if(bulletPool.Count == 0)
            CreateNewBullet();

        //this will take the bullet out that is inside of the queue.
        GameObject bulletToGet = poolDictionary[poolName].Dequeue();
        bulletToGet.SetActive(true);
        bulletToGet.transform.parent = null;

        return bulletToGet;
    }

    //instead of destroying the bullet we are going to let it re enter the queue.
    public void ReturnBullet(GameObject bullet)
    {
        bullet.SetActive(false);
        poolDictionary["Bullet"].Enqueue(bullet);
        bullet.transform.parent = transform;
    }

    private void CreateInitialPool()
    {
        for (int i = 0; i < poolSize; i++)
        {
            CreateNewBullet();
        }
    }

    private void CreateNewBullet()
    {
        //set up a parent for the bullets in the object pool.
        GameObject newBullet = Instantiate(bulletPrefab, transform);
        newBullet.SetActive(false);
        bulletPool.Enqueue(newBullet);
    }
}
