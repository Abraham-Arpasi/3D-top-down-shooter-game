using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ObjectPool : MonoBehaviour
{
    public static ObjectPool instance;

    //this will create lots of bullets in the beginnging of the game.
    [SerializeField] private int poolSize = 10;

    //queue is when an object enters a queue first it is also the first to get out.
    //gives the queue of the gameobject is something is asking for it by using the key bulletPrefab.
    private Dictionary<GameObject, Queue<GameObject>> poolDictionary = 
        new Dictionary<GameObject, Queue<GameObject>>();

    [Header("To Initialize")]
    [SerializeField] private GameObject weaponPickup;
    [SerializeField] private GameObject ammoPickup;

    //this will make sure we only have one instance of object pool in the game. 
    private void Awake()
    {
        if(instance == null)
            instance = this;
        else
            Destroy(gameObject);
    }

    private void Start()
    {
        InitilizeNewPool(weaponPickup);
        InitilizeNewPool(ammoPickup);
    }

    //this will take the bullet out the the pool instead of creating a new bullet.
    public GameObject GetObject(GameObject prefab, Transform target)
    {
        if(poolDictionary.ContainsKey(prefab) == false)
        {
            InitilizeNewPool(prefab);
        }

        if (poolDictionary[prefab].Count == 0)
            CreateNewObject(prefab); //if all objects of this type are in use, create a new one.

        //this will take the bullet out that is inside of the queue.
        GameObject objectToGet = poolDictionary[prefab].Dequeue();

        objectToGet.transform.position = target.position;
        objectToGet.transform.parent = null;

        objectToGet.SetActive(true);
        return objectToGet;
    }

    public void ReturnObject(GameObject objectToReturn, float delay = .001f)
    {
        StartCoroutine(DelayReturn(delay, objectToReturn));
    }

    private IEnumerator DelayReturn(float delay, GameObject objectToReturn)
    {
        yield return new WaitForSeconds(delay);

        ReturnToPool(objectToReturn);
    }

    //instead of destroying the bullet we are going to let it re enter the queue.
    private void ReturnToPool(GameObject objectToReturn)
    {
        GameObject originalPrefab = objectToReturn.GetComponent<PooledObject>().originalPrefab;

        objectToReturn.SetActive(false);
        poolDictionary[originalPrefab].Enqueue(objectToReturn);

        objectToReturn.transform.parent = transform;
    }

    private void InitilizeNewPool(GameObject prefab)
    {
        poolDictionary[prefab] = new Queue<GameObject>();

        for (int i = 0; i < poolSize; i++)
        {
            CreateNewObject(prefab);
        }
    }

    private void CreateNewObject(GameObject prefab)
    {
        //set up a parent for the bullets in the object pool.
        GameObject newObject = Instantiate(prefab, transform);
        newObject.AddComponent<PooledObject>().originalPrefab = prefab;

        newObject.SetActive(false);
        poolDictionary[prefab].Enqueue(newObject);
    }
}
