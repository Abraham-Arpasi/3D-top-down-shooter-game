using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//setup which weapons are one handed and which ones are thrown.
public enum Enemy_MeleeWeaponType { OneHand, Throw}
public class Enemy_Visuals : MonoBehaviour
{
    [Header("Weapons")]
    [SerializeField] private Enemy_WeaponModel[] weaponModels;
    [SerializeField] private Enemy_MeleeWeaponType weaponType;
    public GameObject currentWeaponModel { get; private set; }

    [Header("Corruption")]
    [SerializeField] private GameObject[] corruptionCrystals;
    [SerializeField] private int corruptionAmount;

    //created an array for multiple textures of the enemy.
    [Header("Color")]
    [SerializeField] private Texture[] colorTextures;
    [SerializeField] private SkinnedMeshRenderer skinnedMeshRenderer;

    private void Start()
    {
        weaponModels = GetComponentsInChildren<Enemy_WeaponModel>(true);

        CollectCorruptionCrystals();
    }

    private void CollectCorruptionCrystals()
    {
        Enemy_CorruptionCrystal[] crystalComponent = GetComponentsInChildren<Enemy_CorruptionCrystal>(true);
        corruptionCrystals = new GameObject[crystalComponent.Length];

        for (int i = 0; i < crystalComponent.Length; i++)
        {
            corruptionCrystals[i] = crystalComponent[i].gameObject;
        }
    }

    public void SetupWeaponType(Enemy_MeleeWeaponType type) => weaponType = type;
    
    public void SetupLook()
    {
        SetupRandomColor();
        SetupRandomWeapon();
        SetupRandomCorruption();
    }

    private void SetupRandomCorruption()
    {
        List<int> availableIndex = new List<int>();

        for(int i = 0; i < corruptionCrystals.Length; i++)
        {
            availableIndex.Add(i);
            corruptionCrystals[i].SetActive(false);
        }

        for(int i = 0; i < corruptionAmount; i++)
        {
            if (availableIndex.Count == 0)
                break;

            int randomIndex = Random.Range(0, availableIndex.Count);
            int objectIndex = availableIndex[randomIndex];

            corruptionCrystals[objectIndex].SetActive(true);
            availableIndex.RemoveAt(randomIndex);
        }
    }

    //this randomizes which weapon the enemy is holding.
    private void SetupRandomWeapon()
    {
        foreach(var weaponModel in weaponModels)
        {
            //sets all weapons false at the start.
            weaponModel.gameObject.SetActive(false);
        }

        List<Enemy_WeaponModel> filteredWeaponModels = new List<Enemy_WeaponModel>();

       foreach(var weaponModel in weaponModels)
        {
            if(weaponModel.weaponType == weaponType)
                filteredWeaponModels.Add(weaponModel);
        }
       //only sets the weapon the enemy is holding to true;
       int randomIndex = Random.Range(0, filteredWeaponModels.Count);
        currentWeaponModel = filteredWeaponModels[randomIndex].gameObject;
        currentWeaponModel.SetActive(true);
    }

    //sets up a random texture for each enemy.
    private void SetupRandomColor()
    {
        int randomIndex = Random.Range(0, colorTextures.Length);

        Material newMat = new Material(skinnedMeshRenderer.material);

        newMat.mainTexture = colorTextures[randomIndex];

        skinnedMeshRenderer.material = newMat;
    }
}
